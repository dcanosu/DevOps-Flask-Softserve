pipeline {
    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }
    agent any

    tools {
        terraform 'terraform' // AsegÃºrate de que la herramienta Terraform estÃ© configurada en Jenkins
        ansible 'ansible'     // AsegÃºrate de que la herramienta Ansible estÃ© configurada en Jenkins (apuntando a la ubicaciÃ³n de Windows)
    }

    environment {
        SSH_PUBLIC_KEY         = credentials('ec2-ssh-key-public')
        SSH_PRIVATE_KEY_PATH   = "C:\\Users\\danie\\.ssh\\id_rsa" // Ruta de Windows
    }

    stages {
        stage('Verify Workspace') {
            steps {
                sh 'pwd' // Imprime el directorio de trabajo actual
                sh 'ls -lR | grep terraform.tfvars' // Lista recursivamente y filtra por el nombre del archivo
            }
        }

        stage('Verify Setup') {
            steps {
                sh 'terraform --version'
                sh 'wsl ansible --version'
            }
        }

        stage('Plan') {
            steps {
                script {
                    withAWS(credentials: 'lowestpermissiontester', region: 'sa-east-1') {
                        withCredentials([file(credentialsId: 'terraform-tfvars', variable: 'TFVARS_FILE')]) {
                            sh '''
                                cd infra
                                rm -f .terraform.tfstate.lock.info
                                rm -f .terraform.lock.hcl
                                rm -rf .terraform/
                                rm -f terraform.tfstate
                                echo "Cleaned previous terraform state and locks"
                                echo "Valor de TFVARS_FILE: $TFVARS_FILE"
                                cat "$TFVARS_FILE"
                                terraform init
                                terraform plan -var-file="$TFVARS_FILE" -var="ssh_public_key=${SSH_PUBLIC_KEY}" -out tfplan
                                terraform show -no-color tfplan > tfplan.txt
                            '''
                        }
                    }
                }
            }
        }

        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }
            steps {
                script {
                    def plan = readFile 'infra/tfplan.txt'
                    input message: "Do you want to apply the plan?",
                          parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            steps {
                withAWS(credentials: 'lowestpermissiontester', region: 'sa-east-1') {
                    sh 'cd infra && terraform apply -input=false tfplan'
                }
            }
        }

        stage('Get Terraform Outputs') {
            steps {
                withAWS(credentials: 'lowestpermissiontester', region: 'sa-east-1') {
                    dir('infra') {
                        sh 'terraform output -json > outputs.json'
                    }
                    script {
                        def tf = readJSON file: 'infra/outputs.json'
                        env.EC2_IP         = tf.ec2_public_ip.value
                        env.RDS_ENDPOINT   = tf.rds_endpoint.value
                        writeFile file: 'infra/ansible/inventory.ini', text: """[flask_servers]
                            ${env.EC2_IP} ansible_user=ubuntu ansible_ssh_private_key_file=${SSH_PRIVATE_KEY_PATH} ansible_ssh_common_args='-o StrictHostKeyChecking=no'

                            [flask_servers:vars]
                            rds_endpoint=${env.RDS_ENDPOINT}
                        """
                    }
                }
            }
        }

        stage('Ansible: Test Connectivity') {
            steps {
                withAWS(credentials: 'lowestpermissiontester', region: 'sa-east-1') {
                    sh 'wsl ansible-playbook -i /mnt/c/Users/danie/proyecto_flask_04/DevOps-Flask-Softserve/infra/ansible/inventory.ini /mnt/c/Users/danie/proyecto_flask_04/DevOps-Flask-Softserve/infra/ansible/playbooks/test_connections.yml'
                }
            }
        }

        stage('Cleanup') {
            steps {
                always {
                    sh 'cd infra && rm -f tfplan tfplan.txt || echo "No temp files to clean"'
                    echo 'Cleanup process finished.'
                }
            }
        }
    }

    post {
        always {
            echo 'Deployment process finished.'
        }
        success {
            echo "EC2 and RDS instance 'flask-app-dev' deployed successfully!"
        }
        failure {
            echo "ðŸ’” Deployment failed. Check logs above."
        }
    }
}