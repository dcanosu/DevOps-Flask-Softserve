pipeline {
    agent any

    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    tools {
        terraform 'terraform'
    }

    stages {
        stage('Verify Setup') {
            steps {
                sh 'terraform --version'
                sh 'pwd && ls -la'
                sh 'ls -la infra'
            }
        }

        stage('Verify TFVARS File') {
            steps {
                withCredentials([file(credentialsId: 'terraform-tfvars', variable: 'TFVARS_FILE')]) {
                    sh "echo '=== Contents of TFVARS_FILE ==='"
                    sh "cat \"${TFVARS_FILE}\""
                }
            }
        }

        stage('Plan') {
            steps {
                sh '''
                    cd infra
                    rm -f .terraform.tfstate.lock.info
                    rm -f .terraform.lock.hcl
                    rm -rf .terraform/
                    rm -f terraform.tfstate
                    echo "Cleaned previous terraform state and locks"
                '''

                sh 'cd infra && terraform init'

                // Explicitly specify the var-file
                sh "cd infra && terraform plan -var-file=\"terraform.tfvars\" -out tfplan"

                sh 'cd infra && terraform show -no-color tfplan > tfplan.txt'
            }
        }

        stage('Approval') {
            when {
                not { params.autoApprove }
            }
            steps {
                script {
                    def plan = readFile 'infra/tfplan.txt'
                    input message: "Approve the following Terraform plan?\n\n${plan}"
                }
            }
        }

        stage('Apply') {
            steps {
                sh 'cd infra && terraform apply -input=false tfplan'
            }
        }
    }

    post {
        always {
            sh 'cd infra && rm -f tfplan tfplan.txt'
            echo 'Deployment process finished.'
        }
        success {
            echo ' Deployment successful!'
        }
        failure {
            echo ' Deployment failed. Check logs above.'
        }
    }
}