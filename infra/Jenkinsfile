pipeline {
    agent any

    environment {
        AWS_REGION = 'sa-east-1'
        GIT_CREDENTIALS_ID = 'github-credentials'
        SSH_PRIVATE_KEY_ID = 'ec2-ssh-key'
        TFVARS_FILE_ID = 'terraform-tfvars'
        AWS_CREDENTIALS_ID = 'lowestpermissiontester'
        SSH_PUBLIC_KEY = '' // Inicializamos la variable de entorno
        PRIVATE_KEY_FILE_WINDOWS = "${WORKSPACE}/id_rsa_temp" // Archivo temporal en el workspace de Jenkins
    }

    tools {
        terraform 'terraform'
        ansible 'ansible'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'origin/lowestpermissionuser']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: env.GIT_CREDENTIALS_ID,
                        url: 'https://github.com/dcanosu/DevOps-Flask-Softserve.git'
                    ]]
                ])
            }
        }

        stage('Verify Setup') {
            steps {
                sh 'terraform --version'
                sh 'wsl ansible --version'
            }
        }

        stage('Plan') {
            steps {
                withAWS(credentials: env.AWS_CREDENTIALS_ID) {
                    withCredentials([
                        file(credentialsId: env.TFVARS_FILE_ID, variable: 'TFVARS_FILE'),
                        file(credentialsId: env.SSH_PRIVATE_KEY_ID, variable: 'SSH_PRIVATE_KEY_CONTENT') // Leemos el contenido directamente
                    ]) {
                        script {
                            // Â¡ADVERTENCIA DE SEGURIDAD! Escribimos la clave privada al workspace de Jenkins
                            writeFile file: env.PRIVATE_KEY_FILE_WINDOWS, text: env.SSH_PRIVATE_KEY_CONTENT
                            // Restringimos los permisos del archivo en Windows (INTENTO - puede no ser efectivo)
                            sh "icacls \"${env.PRIVATE_KEY_FILE_WINDOWS}\" /grant:r \"${env.USERNAME}\":F /inheritance:r"
                            sh "icacls \"${env.PRIVATE_KEY_FILE_WINDOWS}\" /remove:d BUILTIN\\Users"
                            // Obtenemos la ruta de Windows para WSL
                            def windowsPrivateKeyPath = "${env.PRIVATE_KEY_FILE_WINDOWS}".replace('\\', '/')
                            // Obtenemos la clave pÃºblica usando WSL para acceder al archivo en el workspace de Windows
                            env.SSH_PUBLIC_KEY = sh(script: "wsl ssh-keygen -y -f \"${windowsPrivateKeyPath}\"", returnStdout: true).trim()
                            // Limpiamos el archivo (IMPORTANTE)
                            deleteDir(dir: env.PRIVATE_KEY_FILE_WINDOWS)
                        }
                        sh "cd infra && terraform init"
                        sh "cd infra && terraform plan -var-file=\"${TFVARS_FILE}\" -var=\"ssh_public_key=${env.SSH_PUBLIC_KEY}\" -out tfplan"
                    }
                }
            }
        }

        stage('Approval') {
            steps {
                input message: 'Approve Terraform plan?', ok: 'Proceed to Apply'
            }
        }

        stage('Apply') {
            steps {
                withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS_ID) {
                    sh "cd infra && terraform apply -input=false tfplan"
                }
            }
        }

        stage('Get Terraform Outputs') {
            steps {
                withAWS(region: env.AWS_REGION, credentials: env.AWS_CREDENTIALS_ID) {
                    sh 'cd infra && terraform output'
                    script {
                        def ec2_ip = sh(script: 'cd infra && terraform output -raw ec2_public_ip', returnStdout: true).trim()
                        def rds_endpoint = sh(script: 'cd infra && terraform output -raw rds_endpoint', returnStdout: true).trim()
                        echo "EC2 Public IP: ${ec2_ip}"
                        echo "RDS Endpoint: ${rds_endpoint}"
                        env.EC2_PUBLIC_IP = ec2_ip
                        env.RDS_ENDPOINT = rds_endpoint
                    }
                }
            }
        }

        stage('Ansible: Test Connectivity') {
            steps {
                withCredentials([file(credentialsId: env.SSH_PRIVATE_KEY_ID, variable: 'ANSIBLE_PRIVATE_KEY_FILE')]) {
                    sh """
                        chmod 400 "${ANSIBLE_PRIVATE_KEY_FILE}"
                        wsl ansible -i "${env.EC2_PUBLIC_IP}," --private-key="${ANSIBLE_PRIVATE_KEY_FILE}" -m ping all
                    """
                }
            }
        }

        stage('Cleanup') {
            steps {
                echo 'Deployment process finished.'
            }
        }
    }

    post {
        always {
            echo 'ðŸ’” Deployment finished.'
        }
        success {
            echo 'ðŸ’š Deployment successful!'
        }
        failure {
            echo 'ðŸ’” Deployment failed. Check logs above.'
        }
    }
}