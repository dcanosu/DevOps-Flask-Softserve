pipeline {
    agent any

    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    }

    environment {
        AWS_REGION = 'us-east-1' // Puedes mantener esto si quieres una regiÃ³n por defecto
    }

    tools {
        terraform 'terraform' // AsegÃºrate de que 'terraform' estÃ© configurado en Jenkins > Manage Jenkins > Tools
    }

    stages {
        // La etapa de checkout es manejada por la configuraciÃ³n del job de Jenkins (Pipeline script from SCM)
        // No necesitamos un 'git' step explÃ­cito aquÃ­ a menos que quieras clonar otro repositorio o una subcarpeta especÃ­fica.
        stage('Verify Setup') {
            steps {
                sh 'terraform --version'
                sh 'pwd && ls -la'
                sh 'ls -la infra' // Asume que 'infra' estÃ¡ en la raÃ­z del repositorio clonado
            }
        }

        stage('Verify TFVARS File') {
            steps {
                withCredentials([file(credentialsId: 'terraform-tfvars', variable: 'TFVARS_FILE')]) {
                    sh "echo '=== Contents of TFVARS_FILE ==='"
                    sh "cat \"${TFVARS_FILE}\""
                }
            }
        }

        stage('AWS Terraform Operations') { // Etapa principal para operaciones de Terraform con credenciales AWS
            steps {
                withAWS(credentials: 'lowestpermissiontester-credentials', region: "${env.AWS_REGION}") {
                    stage('Plan') { // Etapa anidada para el plan de Terraform
                        steps {
                            sh '''
                                cd infra
                                rm -f .terraform.tfstate.lock.info
                                rm -f .terraform.lock.hcl
                                rm -rf .terraform/
                                rm -f terraform.tfstate
                                echo "Cleaned previous terraform state and locks"
                            '''

                            sh 'terraform init' // Ya estamos en 'infra'
                            sh "terraform plan -var-file=\"${TFVARS_FILE}\" -out tfplan"
                            sh 'terraform show -no-color tfplan > tfplan.txt'
                        }
                    }

                    stage('Approval') { // Etapa anidada para la aprobaciÃ³n manual
                        when {
                            expression { !params.autoApprove }
                        }
                        steps {
                            script {
                                def plan = readFile 'infra/tfplan.txt'
                                input message: "Approve the following Terraform plan?\n\n${plan}"
                            }
                        }
                    }

                    stage('Apply') { // Etapa anidada para aplicar Terraform
                        steps {
                            sh 'cd infra && terraform apply -input=false tfplan'
                        }
                    }
                }
            }
        } // Fin de la etapa 'AWS Terraform Operations'
    }

    post {
        always {
            // Limpiar archivos de plan y estado si existen
            sh 'cd infra && rm -f tfplan tfplan.txt || true' // '|| true' para evitar fallos si los archivos no existen
            echo 'Deployment process finished.'
        }
        success {
            echo 'ðŸš€ Deployment successful!'
        }
        failure {
            echo 'ðŸ’” Deployment failed. Check logs above.'
        }
    }
}