pipeline {
    agent any

    environment {
        TFVARS_FILE = credentials('terraform-vars')
    }

    stages {
        stage('Declarative: Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Verify Setup') {
            steps {
                sh 'terraform --version'
                sh 'pwd'
                sh 'ls -la'
                sh 'ls -la infra'
            }
        }

        stage('Verify TFVARS File') {
            steps {
                withCredentials([file(credentialsId: 'terraform-vars', variable: 'TFVARS_FILE')]) {
                    sh '''
                        echo '=== Contents of TFVARS_FILE ==='
                        cat "$TFVARS_FILE"
                    '''
                }
            }
        }

        stage('Plan') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'lowestpermissiontester-credentials']]) {
                    withEnv(['AWS_DEFAULT_REGION=sa-east-1']) {
                        dir('infra') {
                            sh 'terraform init'
                            sh "terraform plan -var-file=\"$TFVARS_FILE\" -out=tfplan"
                            sh 'terraform show -no-color tfplan > tfplan.txt'
                        }
                    }
                }
            }
        }

        stage('Apply') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                input 'Do you want to apply these changes?'
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'lowestpermissiontester-credentials']]) {
                    withEnv(['AWS_DEFAULT_REGION=sa-east-1']) {
                        dir('infra') {
                            sh 'terraform apply -input=false tfplan'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            dir('infra') {
                sh 'rm -f tfplan tfplan.txt || true'
            }
            echo 'Deployment process finished.'
        }
        failure {
            echo 'ðŸ’” Deployment failed. Check logs above.'
        }
    }
}